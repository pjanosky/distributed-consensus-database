#!/usr/bin/env python3

import argparse
import json
import select
import socket
import time
import random
from enum import Enum

BROADCAST = "FFFF"
SEED = None
ELECTION_TIMEOUT_RANGE = range(400, 650)
HEARTBEAT_FREQUENCY = 175
RESPONSE_TIMEOUT = int((ELECTION_TIMEOUT_RANGE.start + ELECTION_TIMEOUT_RANGE.stop) / 2 * 1.5)


class State(Enum):
    LEADER = 'leader'
    CANDIDATE = 'candidate'
    FOLLOWER = 'follower'

    def __str__(self):
        return self.value


class Entry:
    def __init__(self, term, key, value, src, dst, mid):
        self.term = term
        self.key = key
        self.value = value
        self.src = src
        self.dst = dst
        self.mid = mid

    def encode(self):
        return {'term': self.term,
                'key': self.key,
                'value': self.value,
                'src': self.src,
                'dst': self.dst,
                'mid': self.mid}

    @classmethod
    def decode(cls, dct):
        return Entry(dct['term'], dct['key'], dct['value'], dct['src'], dct['dst'], dct['mid'])

    def __str__(self):
        return str(self.encode())


class Get:
    def __init__(self, src, key, mid):
        self.src = src
        self.key = key
        self.mid = mid
        self.time = now()

    def __hash__(self):
        return hash(self.mid)

    def __eq__(self, other):
        return self.mid == other.mid


class Replica:
    def __init__(self, port, id, others):
        # initialize connection data
        self.port = port
        self.id = id
        self.others = others

        # initialize socket
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))

        # initialize Raft data
        self.state = State.FOLLOWER
        self.log = []
        self.state_machine = {}
        self.current_term = -1
        self.leader = BROADCAST
        self.election_timeout = random.choice(ELECTION_TIMEOUT_RANGE)
        self.last_append_time = now()
        self.voted_for = None
        self.votes = set()
        self.commit_index = -1
        self.gets = set()

        # initialize leader data
        # map from id to the index of the highest log entry known to be on the server
        self.match_index = dict.fromkeys(self.others, -1)
        # map from id to next index the leader will send to that server
        self.next_index = dict.fromkeys(self.others, len(self.log))
        # map from id to the last time we've heard from that server
        self.last_heard = dict.fromkeys(self.others, 0)

        self.maj_thresh = int((len(self.others) + 1) / 2) + 1

        # start a new term
        self.new_term(0)

        # send hello message
        dprint(f'Replica {self.id} starting up')
        self.send_msg(BROADCAST, 'hello', {})

    def run(self):
        timeout = self.election_timeout - (now() - self.last_append_time)

        while True:
            socks = select.select([self.socket], [], [], float(max(0, timeout)) / 1000)[0]
            # handle any messages that were received
            if len(socks) > 0:
                data, addr = socks[0].recvfrom(65535)
                msg = json.loads(data.decode('utf-8'))
                self.handle_msg(msg)

            # check for timeouts
            if self.state == State.LEADER:
                if now() >= self.last_append_time + HEARTBEAT_FREQUENCY:
                    # heartbeat timeout (we haven't sent append RPCs in a while)
                    self.send_heartbeat()
                latest = sorted(self.last_heard.values())[self.maj_thresh - 1]
                if now() >= latest + RESPONSE_TIMEOUT:
                    # leader timeout (we haven't heard form a majority of replicas in a while)
                    self.state = State.FOLLOWER
                    self.leader = BROADCAST
                timeout = min(HEARTBEAT_FREQUENCY - (now() - self.last_append_time),
                              RESPONSE_TIMEOUT - (now() - latest))
            elif now() >= self.last_append_time + self.election_timeout:
                # election timeout (we haven't heard from the leader in a while)
                self.begin_election()
                timeout = self.election_timeout - (now() - self.last_append_time)

    def send_msg(self, dst, type, keys):
        msg = {'src': self.id,
               'dst': dst,
               'leader': self.leader,
               'type': type}
        msg.update(keys)
        self.socket.sendto(json.dumps(msg).encode('utf-8'), ('localhost', self.port))

    def send_heartbeat(self):
        dprint(f'sending heartbeat')
        for dst in self.others:
            self.send_update(dst, force=True)

    def new_term(self, term):
        # increment term
        if term > self.current_term:
            # reinitialize voting data
            self.voted_for = None
            self.election_timeout = random.choice(ELECTION_TIMEOUT_RANGE)
            self.current_term = term

    def begin_election(self):
        self.new_term(self.current_term + 1)
        dprint(f'starting election (term: {self.current_term})')
        self.last_append_time = now()
        self.state = State.CANDIDATE
        self.voted_for = self.id
        self.votes = {self.id}  # vote for yourself
        self.leader = BROADCAST

        # send vote requests out to all hosts in cluster
        latest_term = self.log[-1].term if len(self.log) > 0 else -1
        for dst in self.others:
            self.send_msg(dst, 'request_vote', {'term': self.current_term,
                                                'last_log_term': latest_term,
                                                'last_log_index': len(self.log) - 1})

    def commit(self, index):
        # ensure valid index
        if index < self.commit_index:
            return
        else:
            index = min(index, len(self.log) - 1)

        # apply commands to state machine
        for entry in self.log[self.commit_index + 1:index + 1]:
            self.state_machine[entry.key] = entry.value
            
            # send response to client
            if self.state == State.LEADER:
                self.send_msg(entry.src, 'ok', {'MID': entry.mid})
                dprint(f'completed PUT (mid: {entry.mid}, key: {entry.key}, value: {entry.value})')

        # increment commit index
        self.commit_index = index

    def handle_msg(self, msg):
        # handlers for different types of messages
        handlers = {'get': self.handle_get,
                    'put': self.handle_put,
                    'request_vote': self.handle_request_vote,
                    'request_vote_response': self.handle_request_vote_response,
                    'append': self.handle_append,
                    'append_response': self.handle_append_response}

        # save the time of hearing from the sender
        if msg['src'] in self.last_heard:
            self.last_heard[msg['src']] = now()

        # call the appropriate handler
        if msg['type'] in handlers.keys():
            handlers[msg['type']](msg)
        else:
            dprint(f'unknown message type: {msg["type"]}')

    def handle_get(self, msg):
        if self.state == State.LEADER:
            # execute the request as the leader
            dprint(f'executing GET (mid: {msg["MID"]}, key {msg["key"]})')
            for dst in self.others:
                self.send_update(dst, force=True)
            self.gets.add(Get(msg['src'], msg['key'], msg['MID']))
        else:
            # redirect request to leader
            dprint(f'redirecting GET to {self.leader} (mid: {msg["MID"]}, key: {msg["key"]}')
            self.send_msg(msg['src'], 'redirect', {'MID': msg['MID']})

    def handle_put(self, msg):
        if self.state == State.LEADER:
            # execute the request as the leader
            if len(list(filter(lambda e: e.mid == msg['mid'], self.log))) > 0:
                # this is a duplicate request, respond immediately
                self.send_msg(msg['src'], 'ok', {'MID': msg['mid']})
            else:
                # this is a new request, add an entry to our log
                dprint(f'executing PUT (mid: {msg["MID"]}, key {msg["key"]}, value: {msg["value"]}, index: {len(self.log)})')
                self.log.append(Entry(self.current_term, msg['key'], msg['value'], msg['src'], msg['dst'], msg['MID']))
                
                # replicate message on other servers
                for dst in self.others:
                    self.send_update(dst)
        else:
            # redirect request to leader
            dprint(f'redirecting PUT to {self.leader}')
            self.send_msg(msg['src'], 'redirect', {'MID': msg['MID']})

    def handle_request_vote(self, msg):
        # update our current term if we are behind
        self.new_term(msg['term'])
        
        # ensure this request is valid
        if self.current_term <= msg['term'] and self.voted_for is None and not self.more_updated(msg):
            # vote for the sender
            dprint(f'voting for {msg["src"]}')
            self.state = State.FOLLOWER
            self.leader = BROADCAST
            self.last_append_time = now()
            self.voted_for = msg['src']
            self.send_msg(msg['src'], 'request_vote_response', {'term': self.current_term})

    def handle_request_vote_response(self, msg):
        # check if we should accept this response
        if self.state == State.CANDIDATE and msg['term'] == self.current_term:
            dprint(f'received vote from {msg["src"]}')
            self.votes.add(msg['src'])

            # check if we have enough votes to win
            if len(self.votes) >= self.maj_thresh:
                # we are the leader now
                dprint(f"I'm the leader now!!! (term={self.current_term})")
                self.state = State.LEADER
                self.leader = self.id
                self.match_index = dict.fromkeys(self.others, -1)
                self.next_index = dict.fromkeys(self.others, len(self.log))

                # notify other servers
                self.send_heartbeat()

    def handle_append(self, msg):
        # decode entry objects from dictionary
        entries = list(map(lambda e: Entry.decode(e), msg['entries']))

        # ensure the Append RPC is valid for the current term
        if msg['term'] >= self.current_term:
            self.last_append_time = now()
            self.state = State.FOLLOWER
            self.leader = msg['src']
            self.new_term(msg['term'])

            # check if this RPC contains new entries
            if len(msg['entries']) > 0:
                # ensure our log matches the leader's log up to the new entries
                if msg['prev_log_index'] == -1 or (msg['prev_log_index'] < len(self.log) and
                                                   self.log[msg['prev_log_index']].term == msg['prev_log_term']):
                    # logs match, add entries
                    dprint(f'adding new {len(entries)} new entries from {msg["src"]}')
                    del self.log[msg['prev_log_index'] + 1:len(self.log)]
                    self.log += entries
                    self.commit(msg['leader_commit'])

                    # send response to leader
                    self.send_msg(msg['src'], 'append_response', {'success': True, 'match_index': len(self.log) - 1})
                else:
                    # logs don't match, send a failure message
                    dprint(f'failed to add new entries from {msg["src"]}')
                    self.send_msg(msg['src'], 'append_response', {'success': False})
            else:
                # there are no new entries (this was just a heartbeat message)
                dprint(f'received empty append message from {msg["src"]}')
                self.send_msg(msg['src'], 'append_response', {'success': True, 'match_index': len(self.log) - 1})
                self.commit(msg['leader_commit'])

    def handle_append_response(self, msg):
        if msg['success']:
            # entries were successfully added
            dprint(f'received confirmation that log indices up to {msg["match_index"]} are replicated on {msg["src"]}')
            self.match_index[msg['src']] = msg['match_index']
            self.next_index[msg['src']] = msg['match_index'] + 1
            self.apply_safe_entries()
            self.respond_to_gets()
        else:
            # replica failed to add entries, try again with entries further back
            self.next_index[msg['src']] -= 1
            dprint(f'retrying entry replication on {msg["src"]} with index {self.next_index["src"]}')
            self.send_update(msg['src'])

    # send append RPCs to other servers to ensure their log matches this servers log
    # force: make sure an append RPC is sent out no matter what
    # (sends a heartbeat message if there's no new entries to send)
    def send_update(self, dst, force=False):
        if self.next_index[dst] <= len(self.log) - 1:
            # there are new entires to send to dst
            dprint(f'sending entries from index {self.next_index[dst]} to {dst}')
            prev_index = self.next_index[dst] - 1
            prev_term = self.log[prev_index].term if prev_index >= 0 else -1
            max_entries = 10
            start_index = prev_index + 1
            end_index = min(prev_index + 1 + max_entries, len(self.log))
            self.send_append(dst, prev_index, prev_term, self.log[start_index:end_index])
        elif force:
            # there are no new entries to send to dst, but we should send a heartbeat
            dprint(f'sending heartbeat message to {dst}')
            self.send_append(dst, None, None, [])

    def send_append(self, dst, prev_index, prev_term, entries):
        self.last_append_time = now()
        self.send_msg(dst, 'append', {'term': self.current_term,
                                      'prev_log_index': prev_index,
                                      'prev_log_term': prev_term,
                                      'entries': list(map(lambda e: e.encode(), entries)),
                                      'leader_commit': self.commit_index})

    # commits all entries that have been replicated on a majority of servers
    #  and applies then to this server's state machine
    def apply_safe_entries(self):
        # find the highest entry we can commit
        highest = self.commit_index
        for index in range(self.commit_index + 1, len(self.log)):
            replications = len(list(filter(lambda n: n >= index, self.match_index.values()))) + 1
            if replications >= self.maj_thresh and self.log[index].term == self.current_term:
                highest = index

        # commit the highest entry we can
        self.commit(highest)

    def respond_to_gets(self):
        # find the latest time that we've heard from the majority of servers
        latest = sorted(self.last_heard.values())[self.maj_thresh - 1]

        # respond to all the get requests after that time (we don't have stale data)
        for get in list(self.gets):
            if get.time <= latest:
                # we can respond to this request
                self.gets.remove(get)

                # send a response to the client
                if get.key in self.state_machine:
                    dprint(f'completed GET (mid: {get.mid}, key {get.key})')
                    self.send_msg(get.src, 'ok', {'mid': get.mid,
                                                  'value': self.state_machine[get.key]})
                else:
                    dprint(f'can\'t find value for GET (mid: {get.mid}, key {get.key})')
                    self.send_msg(get.src, 'ok', {'MID': get.mid,
                                                  'value': ''})

    # returns True if this replica's log is more up to date than the log of another
    # replica described in a vote request message
    def more_updated(self, msg):
        latest_term = self.log[-1].term if len(self.log) > 0 else -1 # the term of the last entry in our log
        return (latest_term, len(self.log) - 1) > (msg['last_log_term'], msg['last_log_index'])


# returns the current time since the epoch in ms
def now():
    return int(time.time() * 1000)


# print a message immediately to stdout
def dprint(msg):
    print(str(msg), flush=True)


def parse_args():
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help='Port number to communicate')
    parser.add_argument('id', type=str, help='ID of this replica')
    parser.add_argument('others', metavar='others', type=str, nargs='+', help='IDs of other replicas')
    return parser.parse_args()


# run the kvstore program
if __name__ == '__main__':
    if SEED is not None:
        random.seed(SEED)
    args = parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()
